import { useState, useEffect } from "react";
import { AdminLayout } from "@/components/layouts/AdminLayout";
import { useTranslation } from "react-i18next";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Badge } from "@/components/ui/badge";
import { Pencil, Plus, Trash, RefreshCw, Wand2 } from "lucide-react";
import { toast } from "sonner";

interface Ingredient {
  name: string;
  quantity: number;
  unit: string;
}

interface RecipeMapping {
  menuItemId: string;
  ingredients: Ingredient[];
  lastUpdated: string;
  isAutoGenerated: boolean;
}

interface MenuItem {
  id: string;
  name: {
    en: string;
    it: string;
    es: string;
  };
  category: string;
}

export default function RecipeMappings() {
  const { t } = useTranslation();
  const [mappings, setMappings] = useState<RecipeMapping[]>([]);
  const [menuItems, setMenuItems] = useState<MenuItem[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const [editingMapping, setEditingMapping] = useState<RecipeMapping | null>(null);
  const [editingIngredients, setEditingIngredients] = useState<Ingredient[]>([]);

  useEffect(() => {
    fetchMappings();
    fetchMenuItems();
  }, []);

  const fetchMappings = async () => {
    try {
      const response = await fetch("/api/recipe-mappings");
      if (!response.ok) throw new Error("Failed to fetch mappings");
      const data = await response.json();
      setMappings(data);
    } catch (error) {
      console.error("Error fetching mappings:", error);
      toast.error(t("recipeMappings.fetchError", "Errore nel caricamento delle mappature"));
    }
  };

  const fetchMenuItems = async () => {
    try {
      const response = await fetch("/api/menu");
      if (!response.ok) throw new Error("Failed to fetch menu items");
      const data = await response.json();
      setMenuItems(data);
    } catch (error) {
      console.error("Error fetching menu items:", error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleGenerateMapping = async (menuItemId: string) => {
    try {
      const response = await fetch(`/api/recipe-mappings/${menuItemId}/generate`, {
        method: "POST",
        credentials: "include",
      });
      
      if (!response.ok) throw new Error("Failed to generate mapping");
      
      const newMapping = await response.json();
      setMappings(prev => {
        const index = prev.findIndex(m => m.menuItemId === menuItemId);
        if (index >= 0) {
          return [...prev.slice(0, index), newMapping, ...prev.slice(index + 1)];
        }
        return [...prev, newMapping];
      });
      
      toast.success(t("recipeMappings.generateSuccess", "Mappatura generata con successo"));
    } catch (error) {
      console.error("Error generating mapping:", error);
      toast.error(t("recipeMappings.generateError", "Errore nella generazione della mappatura"));
    }
  };

  const handleGenerateAll = async () => {
    try {
      const response = await fetch("/api/recipe-mappings/generate-all", {
        method: "POST",
        credentials: "include",
      });
      
      if (!response.ok) throw new Error("Failed to generate mappings");
      
      const result = await response.json();
      await fetchMappings();
      
      toast.success(t("recipeMappings.generateAllSuccess", result.message));
    } catch (error) {
      console.error("Error generating all mappings:", error);
      toast.error(t("recipeMappings.generateAllError", "Errore nella generazione delle mappature"));
    }
  };

  const handleUpdateMapping = async () => {
    if (!editingMapping) return;

    try {
      const response = await fetch(`/api/recipe-mappings/${editingMapping.menuItemId}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        credentials: "include",
        body: JSON.stringify({
          ingredients: editingIngredients
        }),
      });
      
      if (!response.ok) throw new Error("Failed to update mapping");
      
      const updatedMapping = await response.json();
      setMappings(prev => prev.map(m => 
        m.menuItemId === updatedMapping.menuItemId ? updatedMapping : m
      ));
      
      setIsEditDialogOpen(false);
      setEditingMapping(null);
      setEditingIngredients([]);
      
      toast.success(t("recipeMappings.updateSuccess", "Mappatura aggiornata con successo"));
    } catch (error) {
      console.error("Error updating mapping:", error);
      toast.error(t("recipeMappings.updateError", "Errore nell'aggiornamento della mappatura"));
    }
  };

  const handleDeleteMapping = async (menuItemId: string) => {
    try {
      const response = await fetch(`/api/recipe-mappings/${menuItemId}`, {
        method: "DELETE",
        credentials: "include",
      });
      
      if (!response.ok) throw new Error("Failed to delete mapping");
      
      setMappings(prev => prev.filter(m => m.menuItemId !== menuItemId));
      toast.success(t("recipeMappings.deleteSuccess", "Mappatura eliminata con successo"));
    } catch (error) {
      console.error("Error deleting mapping:", error);
      toast.error(t("recipeMappings.deleteError", "Errore nell'eliminazione della mappatura"));
    }
  };

  const addIngredient = () => {
    setEditingIngredients([...editingIngredients, { name: "", quantity: 0, unit: "" }]);
  };

  const updateIngredient = (index: number, field: keyof Ingredient, value: string | number) => {
    const newIngredients = [...editingIngredients];
    newIngredients[index] = {
      ...newIngredients[index],
      [field]: field === "quantity" ? Number(value) : value
    };
    setEditingIngredients(newIngredients);
  };

  const removeIngredient = (index: number) => {
    setEditingIngredients(editingIngredients.filter((_, i) => i !== index));
  };

  const getMenuItemName = (menuItemId: string) => {
    const menuItem = menuItems.find(item => item.id === menuItemId);
    return menuItem?.name.it || menuItemId;
  };

  if (isLoading) {
    return (
      <AdminLayout>
        <div className="flex items-center justify-center h-full">
          <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-gray-900" />
        </div>
      </AdminLayout>
    );
  }

  return (
    <AdminLayout>
      <div className="space-y-6">
        <div className="flex justify-between items-center">
          <h1 className="text-3xl font-bold">
            {t("recipeMappings.title", "Gestione Mappature Ricette")}
          </h1>
          <Button onClick={handleGenerateAll}>
            <Wand2 className="w-4 h-4 mr-2" />
            {t("recipeMappings.generateAll", "Genera Tutte")}
          </Button>
        </div>

        <Card>
          <CardHeader>
            <CardTitle>{t("recipeMappings.list", "Lista Mappature")}</CardTitle>
          </CardHeader>
          <CardContent>
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>{t("recipeMappings.dishName", "Nome Piatto")}</TableHead>
                  <TableHead>{t("recipeMappings.ingredients", "Ingredienti")}</TableHead>
                  <TableHead>{t("recipeMappings.lastUpdated", "Ultimo Aggiornamento")}</TableHead>
                  <TableHead>{t("recipeMappings.source", "Fonte")}</TableHead>
                  <TableHead className="text-right">{t("common.actions", "Azioni")}</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {mappings.map((mapping) => (
                  <TableRow key={mapping.menuItemId}>
                    <TableCell>{getMenuItemName(mapping.menuItemId)}</TableCell>
                    <TableCell>
                      {mapping.ingredients.map((ing, i) => (
                        <span key={i} className="mr-2">
                          {ing.name} ({ing.quantity} {ing.unit})
                          {i < mapping.ingredients.length - 1 ? "," : ""}
                        </span>
                      ))}
                    </TableCell>
                    <TableCell>
                      {new Date(mapping.lastUpdated).toLocaleDateString()}
                    </TableCell>
                    <TableCell>
                      <Badge variant={mapping.isAutoGenerated ? "secondary" : "default"}>
                        {mapping.isAutoGenerated ? "AI" : "Manuale"}
                      </Badge>
                    </TableCell>
                    <TableCell className="text-right space-x-2">
                      <Button
                        variant="outline"
                        size="icon"
                        onClick={() => {
                          setEditingMapping(mapping);
                          setEditingIngredients([...mapping.ingredients]);
                          setIsEditDialogOpen(true);
                        }}
                      >
                        <Pencil className="w-4 h-4" />
                      </Button>
                      <Button
                        variant="outline"
                        size="icon"
                        onClick={() => handleGenerateMapping(mapping.menuItemId)}
                      >
                        <RefreshCw className="w-4 h-4" />
                      </Button>
                      <Button
                        variant="outline"
                        size="icon"
                        onClick={() => handleDeleteMapping(mapping.menuItemId)}
                      >
                        <Trash className="w-4 h-4" />
                      </Button>
                    </TableCell>
                  </TableRow>
                ))}
                {menuItems.filter(item => !mappings.some(m => m.menuItemId === item.id)).map((item) => (
                  <TableRow key={item.id}>
                    <TableCell>{item.name.it}</TableCell>
                    <TableCell colSpan={3} className="text-muted-foreground italic">
                      {t("recipeMappings.noMapping", "Nessuna mappatura")}
                    </TableCell>
                    <TableCell className="text-right">
                      <Button
                        variant="outline"
                        size="icon"
                        onClick={() => handleGenerateMapping(item.id)}
                      >
                        <Wand2 className="w-4 h-4" />
                      </Button>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </CardContent>
        </Card>

        <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>
          <DialogContent className="max-w-2xl">
            <DialogHeader>
              <DialogTitle>
                {t("recipeMappings.editMapping", "Modifica Mappatura")}
              </DialogTitle>
              <DialogDescription>
                {t("recipeMappings.editDescription", "Modifica gli ingredienti per questa ricetta")}
              </DialogDescription>
            </DialogHeader>
            
            <div className="space-y-4">
              <div className="flex justify-between items-center">
                <h3 className="text-lg font-medium">
                  {editingMapping && getMenuItemName(editingMapping.menuItemId)}
                </h3>
                <Button onClick={addIngredient} variant="outline" size="sm">
                  <Plus className="w-4 h-4 mr-2" />
                  {t("recipeMappings.addIngredient", "Aggiungi Ingrediente")}
                </Button>
              </div>

              {editingIngredients.map((ingredient, index) => (
                <div key={index} className="flex gap-4 items-center">
                  <div className="flex-1">
                    <Label>{t("recipeMappings.ingredientName", "Nome")}</Label>
                    <Input
                      value={ingredient.name}
                      onChange={(e) => updateIngredient(index, "name", e.target.value)}
                    />
                  </div>
                  <div className="w-24">
                    <Label>{t("recipeMappings.quantity", "Quantità")}</Label>
                    <Input
                      type="number"
                      value={ingredient.quantity}
                      onChange={(e) => updateIngredient(index, "quantity", e.target.value)}
                    />
                  </div>
                  <div className="w-24">
                    <Label>{t("recipeMappings.unit", "Unità")}</Label>
                    <Input
                      value={ingredient.unit}
                      onChange={(e) => updateIngredient(index, "unit", e.target.value)}
                    />
                  </div>
                  <div className="flex items-end">
                    <Button
                      variant="ghost"
                      size="icon"
                      onClick={() => removeIngredient(index)}
                    >
                      <Trash className="w-4 h-4" />
                    </Button>
                  </div>
                </div>
              ))}
            </div>

            <DialogFooter>
              <Button variant="outline" onClick={() => {
                setIsEditDialogOpen(false);
                setEditingMapping(null);
                setEditingIngredients([]);
              }}>
                {t("common.cancel", "Annulla")}
              </Button>
              <Button onClick={handleUpdateMapping}>
                {t("common.save", "Salva")}
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      </div>
    </AdminLayout>
  );
} 